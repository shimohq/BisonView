import("//build/config/android/config.gni")
import("//build/config/android/rules.gni")
import("//build/util/version.gni")
import("//bison/build/bison_aar_impl.gni")
import("//tools/v8_context_snapshot/v8_context_snapshot.gni")

template("repackage_jars") {
  dist_jar(target_name) {
    requires_android = true
    direct_deps_only = true
    use_unprocessed_jars = true
    no_build_hooks = true
    forward_variables_from(invoker, "*")
  }
}

# _jni_registration_header = "$target_gen_dir/bison_jni_registration.h"
template("android_aar") {
  assert(defined(invoker.shared_libraries))
  # assert(defined(invoker.jni_registration_header))
  # _build_config = "$target_gen_dir/$target_name.build_config"
  # print("_build_config path:", _build_config)

  _template_name = target_name

  _shared_library_list_file =
      "$target_gen_dir/${_template_name}.native_libs"
  generated_file("${_template_name}__shared_library_list") {
    deps = invoker.shared_libraries
    outputs = [
      _shared_library_list_file,
    ]
    data_keys = [ "shared_libraries" ]
    walk_keys = [ "shared_libraries_barrier" ]
    rebase = root_build_dir
  }

  # generate_build_config_srcjar @see rules.gni 2676

  write_native_libraries_java("${_template_name}__native_libraries") {
    deps = [
      ":${_template_name}__shared_library_list",
      "//build/util:chrome_version_json"
    ]
    _native_lib_file =
        rebase_path("$root_gen_dir/CHROME_VERSION.json", root_out_dir)
    version_number = "@FileArg($_native_lib_file:full-quoted)"
    native_libraries_list_file = _shared_library_list_file
    use_final_fields = true
  }

  android_library("${_template_name}__native_libraries_java"){
    srcjar_deps = [":${_template_name}__native_libraries"]
  }
  _deps = []
  _deps += [":${_template_name}__native_libraries_java"]
  _generate_jni_targets = []
  if (defined(invoker.deps)) {
    _generate_jni_targets = filter_include(invoker.deps, ["*:*_java","*:*_javalib","*:java"])
  }
  if (_generate_jni_targets != []) {
    _jni_registration_header = "$target_gen_dir/bison_jni_registration.h"
    generate_jni_registration("${_template_name}__final_jni") {
      forward_variables_from(invoker,
                                [
                                  "enable_native_mocks",
                                  "require_native_mocks",
                                ])
      targets = _generate_jni_targets
      header_output = _jni_registration_header
    }

    android_library("${_template_name}__final_jni_java") {
      srcjar_deps = [ ":${_template_name}__final_jni" ]
    }
    _deps += [":${_template_name}__final_jni_java"]
  }


  if (defined(invoker.deps)) {
    _deps += invoker.deps
  }

  _native_libraries = []
  _deps += invoker.shared_libraries
  foreach(d, invoker.shared_libraries) {
    _native_libraries += [ "$root_build_dir/"+ get_label_info(d, "name" ) + ".so" ]
  }

  # print("_native_libraries",_native_libraries)

  build_aar_impl(target_name) {
    forward_variables_from(invoker, [
      "android_manifest",
      "output",
      "resource_included_patterns",
      "jar_excluded_patterns",
    ])
    deps = _deps

    native_libraries = _native_libraries
  }
}
