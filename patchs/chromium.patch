diff --git a/BUILD.gn b/BUILD.gn
index 09b4c938cdec9..584ac69d41ee4 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -391,6 +391,7 @@ group("gn_all") {
       "//weblayer/public/java:client_aar",
       "//weblayer/shell/android:weblayer_shell_apk",
       "//weblayer/shell/android:weblayer_support_apk",
+      "//bison",
     ]
     deps -= [
       "//net:net_perftests",
diff --git a/base/i18n/icu_util.cc b/base/i18n/icu_util.cc
index 83c641d3cfae8..2b756d913871f 100644
--- a/base/i18n/icu_util.cc
+++ b/base/i18n/icu_util.cc
@@ -111,7 +111,7 @@ const char kIcuTimeZoneDataDir[] = "/config/data/tzdata/icu/44/le";
 #endif  // BUILDFLAG(IS_FUCHSIA)
 
 #if BUILDFLAG(IS_ANDROID)
-const char kAndroidAssetsIcuDataFileName[] = "assets/icudtl.dat";
+const char kAndroidAssetsIcuDataFileName[] = "assets/bison/icudtl.dat";
 #endif  // BUILDFLAG(IS_ANDROID)
 
 // File handle intentionally never closed. Not using File here because its
diff --git a/base/threading/thread_restrictions.h b/base/threading/thread_restrictions.h
index 114677b5163b8..e762625feecf8 100644
--- a/base/threading/thread_restrictions.h
+++ b/base/threading/thread_restrictions.h
@@ -122,6 +122,11 @@ class CookieManager;
 class ScopedAllowInitGLBindings;
 class VizCompositorThreadRunnerWebView;
 }  // namespace android_webview
+namespace bison {
+class BvFormDatabaseService;
+class CookieManager;
+class ScopedAllowInitGLBindings;
+}
 namespace ash {
 class MojoUtils;
 class BrowserDataMigrator;
@@ -452,6 +457,7 @@ class BASE_EXPORT ScopedAllowBlocking {
   friend class ::GaiaConfig;
   friend class ::StartupTabProviderImpl;
   friend class android_webview::ScopedAllowInitGLBindings;
+  friend class bison::ScopedAllowInitGLBindings;
   friend class ash::MojoUtils;  // http://crbug.com/1055467
   friend class ash::BrowserDataMigrator;
   friend class base::AdjustOOMScoreHelper;
@@ -640,6 +646,8 @@ class BASE_EXPORT ScopedAllowBaseSyncPrimitivesOutsideBlockingScope {
       AwFormDatabaseService;  // http://crbug.com/904431
   friend class android_webview::CookieManager;
   friend class android_webview::VizCompositorThreadRunnerWebView;
+  friend class bison::BvFormDatabaseService;
+  friend class bison::CookieManager;
   friend class audio::OutputDevice;
   friend class base::sequence_manager::internal::TaskQueueImpl;
   friend class base::FileDescriptorWatcher;
diff --git a/base/trace_event/builtin_categories.h b/base/trace_event/builtin_categories.h
index a1a93418b0b0d..5f1f58922d73c 100644
--- a/base/trace_event/builtin_categories.h
+++ b/base/trace_event/builtin_categories.h
@@ -33,6 +33,7 @@
   X("accessibility")                                                     \
   X("AccountFetcherService")                                             \
   X("android_webview")                                                   \
+  X("bison")                                                             \
   /* Actions on Google Hardware, used in Google-internal code. */        \
   X("aogh")                                                              \
   X("audio")                                                             \
diff --git a/content/browser/v8_snapshot_files.cc b/content/browser/v8_snapshot_files.cc
index cb0af392214eb..2d0f946b359cb 100644
--- a/content/browser/v8_snapshot_files.cc
+++ b/content/browser/v8_snapshot_files.cc
@@ -19,15 +19,26 @@ std::map<std::string, base::FilePath> GetV8SnapshotFilesToPreload() {
            base::FilePath(FILE_PATH_LITERAL("snapshot_blob.bin"))}};
 #endif
 #elif BUILDFLAG(IS_ANDROID)
-#if !defined(USE_V8_CONTEXT_SNAPSHOT)
+#if defined(USE_V8_CONTEXT_SNAPSHOT)
+  return {
+      {kV8Snapshot64DataDescriptor,
+       base::FilePath(FILE_PATH_LITERAL("assets/v8_context_snapshot_64.bin"))},
+      {kV8Snapshot32DataDescriptor,
+       base::FilePath(FILE_PATH_LITERAL("assets/v8_context_snapshot_32.bin"))}};
+#else
+#if defined(ARCH_CPU_ARM_FAMILY)
   return {{kV8Snapshot64DataDescriptor,
-           base::FilePath(FILE_PATH_LITERAL("assets/snapshot_blob_64.bin"))},
+           base::FilePath(FILE_PATH_LITERAL("assets/bison/arm/snapshot_blob_64.bin"))},
           {kV8Snapshot32DataDescriptor,
-           base::FilePath(FILE_PATH_LITERAL("assets/snapshot_blob_32.bin"))}};
-#elif defined(USE_V8_CONTEXT_SNAPSHOT)
-  // For USE_V8_CONTEXT_SNAPSHOT, the renderer reads the files directly.
-  return {};
+           base::FilePath(FILE_PATH_LITERAL("assets/bison/arm/snapshot_blob_32.bin"))}};
+#else   // ARCH_CPU_X86_FAMILY
+  return {{kV8Snapshot64DataDescriptor,
+           base::FilePath(FILE_PATH_LITERAL("assets/bison/x86/snapshot_blob_64.bin"))},
+          {kV8Snapshot32DataDescriptor,
+           base::FilePath(FILE_PATH_LITERAL("assets/bison/x86/snapshot_blob_32.bin"))}};
+#endif  // defined(ARCH_CPU_ARM_FAMILY)
 #endif
+
 #else
   return {};
 #endif
diff --git a/content/shell/android/BUILD.gn b/content/shell/android/BUILD.gn
index f21f3b5d04197..0b3c0661d49e3 100644
--- a/content/shell/android/BUILD.gn
+++ b/content/shell/android/BUILD.gn
@@ -174,13 +174,15 @@ android_assets("content_shell_assets") {
   disable_compression = true
   deps = [
     "//content/shell:pak",
-    "//third_party/icu:icu_assets",
+    #"//third_party/icu:icu_assets",
+    "//bison:bison_icu_assets",
+    "//bison:bison_v8_snapshot_assets"
   ]
-  if (use_v8_context_snapshot) {
-    deps += [ "//tools/v8_context_snapshot:v8_context_snapshot_assets" ]
-  } else {
-    deps += [ "//v8:v8_external_startup_data_assets" ]
-  }
+  # if (use_v8_context_snapshot) {
+  #   deps += [ "//tools/v8_context_snapshot:v8_context_snapshot_assets" ]
+  # } else {
+  #   deps += [ "//v8:v8_external_startup_data_assets" ]
+  # }
 }
 
 template("content_shell_apk_tmpl") {
diff --git a/content/shell/app/shell_main_delegate.cc b/content/shell/app/shell_main_delegate.cc
index 86e85bdc4ea03..95380d1d34580 100644
--- a/content/shell/app/shell_main_delegate.cc
+++ b/content/shell/app/shell_main_delegate.cc
@@ -204,6 +204,7 @@ void ShellMainDelegate::PreSandboxStartup() {
 #if !BUILDFLAG(IS_FUCHSIA)
   if (base::CommandLine::ForCurrentProcess()->HasSwitch(
           switches::kEnableCrashReporter)) {
+    VLOG(0) << "run BUILDFLAG(IS_FUCHSIA):";
     std::string process_type =
         base::CommandLine::ForCurrentProcess()->GetSwitchValueASCII(
             switches::kProcessType);
@@ -212,6 +213,7 @@ void ShellMainDelegate::PreSandboxStartup() {
     if (process_type != switches::kZygoteProcess) {
       crash_reporter::InitializeCrashpad(process_type.empty(), process_type);
 #if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
+      VLOG(0) << "run BUILDFLAG(IS_LINUX):";
       crash_reporter::SetFirstChanceExceptionHandler(
           v8::TryHandleWebAssemblyTrapPosix);
 #endif
diff --git a/content/shell/browser/shell_content_browser_client.cc b/content/shell/browser/shell_content_browser_client.cc
index 151e1706d7681..0e5649cc13dcd 100644
--- a/content/shell/browser/shell_content_browser_client.cc
+++ b/content/shell/browser/shell_content_browser_client.cc
@@ -665,6 +665,7 @@ void ShellContentBrowserClient::CreateFeatureListAndFieldTrials() {
 std::unique_ptr<PrefService> ShellContentBrowserClient::CreateLocalState() {
   auto pref_registry = base::MakeRefCounted<PrefRegistrySimple>();
 
+  VLOG(0) << "not register metrices";
   metrics::MetricsService::RegisterPrefs(pref_registry.get());
   variations::VariationsService::RegisterPrefs(pref_registry.get());
 
diff --git a/gin/v8_initializer.cc b/gin/v8_initializer.cc
index cebcf5ac6f587..533da1eb51636 100644
--- a/gin/v8_initializer.cc
+++ b/gin/v8_initializer.cc
@@ -122,7 +122,14 @@ void GetV8FilePath(const char* file_name, base::FilePath* path_out) {
 #if BUILDFLAG(IS_ANDROID)
   // This is the path within the .apk.
   *path_out =
-      base::FilePath(FILE_PATH_LITERAL("assets")).AppendASCII(file_name);
+      base::FilePath(FILE_PATH_LITERAL("assets"))
+        .AppendASCII("bison")
+#if defined(ARCH_CPU_ARM_FAMILY)
+        .AppendASCII("arm")
+#else
+        .AppendASCII("x86")
+#endif
+        .AppendASCII(file_name);
 #elif BUILDFLAG(IS_MAC)
   base::ScopedCFTypeRef<CFStringRef> bundle_resource(
       base::SysUTF8ToCFStringRef(file_name));
@@ -165,6 +172,8 @@ base::File OpenV8File(const char* file_name,
   GetV8FilePath(file_name, &path);
 
 #if BUILDFLAG(IS_ANDROID)
+
+  VLOG(0) << "on android, v8 file path:" << path.value();
   base::File file(base::android::OpenApkAsset(path.value(), region_out));
   OpenV8FileResult result = file.IsValid() ? OpenV8FileResult::OPENED
                                            : OpenV8FileResult::FAILED_OTHER;
@@ -533,7 +542,7 @@ void V8Initializer::LoadV8SnapshotFromFile(
     return;
 
   if (!snapshot_file.IsValid()) {
-    LOG(FATAL) << "Error loading V8 startup snapshot file";
+    LOG(FATAL) << "Error loading V8 startup snapshot file ,file path:" ;
     return;
   }
 
diff --git a/third_party/blink/public/common/BUILD.gn b/third_party/blink/public/common/BUILD.gn
index 611c6cff317b5..93df1a17307a5 100644
--- a/third_party/blink/public/common/BUILD.gn
+++ b/third_party/blink/public/common/BUILD.gn
@@ -94,6 +94,7 @@ source_set("headers") {
   visibility = [
     ":*",
     "//android_webview/*",
+    "//bison/*",
     "//chrome/*",
     "//chromecast/*",
     "//components/*",
diff --git a/ui/android/java/res/values-v31/colors.xml b/ui/android/java/res/values-v31/colors.xml
index e5bc62c31d05f..1f0ed9b187dd2 100644
--- a/ui/android/java/res/values-v31/colors.xml
+++ b/ui/android/java/res/values-v31/colors.xml
@@ -6,6 +6,6 @@
 
 <resources>
     <!-- System colors for Android S+.-->
-    <color name="system_neutral1_10">@android:color/system_neutral1_10</color>
-    <color name="system_neutral1_900">@android:color/system_neutral1_900</color>
+    <color name="system_neutral1_10">#f0f0f0</color>
+    <color name="system_neutral1_900">#1b1b1b</color>
 </resources>
diff --git a/ui/android/java/src/org/chromium/ui/base/ResourceBundle.java b/ui/android/java/src/org/chromium/ui/base/ResourceBundle.java
index 3fc8f81b2c234..b62a4f7978635 100644
--- a/ui/android/java/src/org/chromium/ui/base/ResourceBundle.java
+++ b/ui/android/java/src/org/chromium/ui/base/ResourceBundle.java
@@ -79,7 +79,7 @@ public final class ResourceBundle {
             // This locale is not supported by Chromium.
             return null;
         }
-        String pathPrefix = "assets/stored-locales/";
+        String pathPrefix = "assets/bison/stored-locales/";
         if (inBundle) {
             if (locale.equals("en-US")) {
                 pathPrefix = "assets/fallback-locales/";
diff --git a/ui/base/resource/resource_bundle_android.cc b/ui/base/resource/resource_bundle_android.cc
index 7595aeb039758..74ca2210a5b4c 100644
--- a/ui/base/resource/resource_bundle_android.cc
+++ b/ui/base/resource/resource_bundle_android.cc
@@ -88,7 +88,7 @@ void ResourceBundle::LoadCommonResources() {
   base::PathService::Get(ui::DIR_RESOURCE_PAKS_ANDROID, &disk_path);
   disk_path = disk_path.AppendASCII("chrome_100_percent.pak");
   bool success =
-      LoadFromApkOrFile("assets/chrome_100_percent.pak", &disk_path,
+      LoadFromApkOrFile("assets/bison/chrome_100_percent.pak", &disk_path,
                         &g_chrome_100_percent_fd, &g_chrome_100_percent_region);
   DCHECK(success);
 
@@ -116,7 +116,7 @@ std::string ResourceBundle::LoadLocaleResources(const std::string& pref_locale,
                                                 bool crash_on_failure) {
   DCHECK(!locale_resources_data_.get() &&
          !secondary_locale_resources_data_.get())
-             << "locale.pak already loaded";
+      << "locale.pak already loaded";
   std::string app_locale = l10n_util::GetApplicationLocale(pref_locale);
 
   // Some Chromium apps have two sets of .pak files for their UI strings, i.e.:
@@ -189,8 +189,8 @@ std::string ResourceBundle::LoadLocaleResources(const std::string& pref_locale,
     }
   }
 
-  locale_resources_data_ = LoadDataPackFromLocalePak(
-      g_locale_pack_fd, g_locale_pack_region);
+  locale_resources_data_ =
+      LoadDataPackFromLocalePak(g_locale_pack_fd, g_locale_pack_region);
 
   if (!locale_resources_data_.get())
     return std::string();
