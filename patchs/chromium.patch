diff --git a/BUILD.gn b/BUILD.gn
index a6b18dea12365..e09e826ad13e0 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -359,6 +359,7 @@ group("gn_all") {
       "//components:components_junit_tests",
       "//content/public/android:content_junit_tests",
       "//content/shell/android:content_shell_apk",
+      "//bison",
       "//device:device_junit_tests",
       "//media/gpu:video_decode_accelerator_unittest",
       "//net/android:net_junit_tests",
diff --git a/base/android/java/src/org/chromium/base/ApkAssets.java b/base/android/java/src/org/chromium/base/ApkAssets.java
index 4eaf5dd9890c3..7a7102c07b222 100644
--- a/base/android/java/src/org/chromium/base/ApkAssets.java
+++ b/base/android/java/src/org/chromium/base/ApkAssets.java
@@ -27,12 +27,13 @@ public class ApkAssets {
     @CalledByNative
     public static long[] open(String fileName, String splitName) {
         AssetFileDescriptor afd = null;
+        Log.e(LOGTAG, "ApkAssets.open fileName:" + fileName);
         try {
             Context context = ContextUtils.getApplicationContext();
-            if (!TextUtils.isEmpty(splitName)
-                    && BundleUtils.isIsolatedSplitInstalled(context, splitName)) {
-                context = BundleUtils.createIsolatedSplitContext(context, splitName);
-            }
+            // if (!TextUtils.isEmpty(splitName)
+            //         && BundleUtils.isIsolatedSplitInstalled(context, splitName)) {
+            //     context = BundleUtils.createIsolatedSplitContext(context, splitName);
+            // }
             AssetManager manager = context.getAssets();
             afd = manager.openNonAssetFd(fileName);
             return new long[] {afd.getParcelFileDescriptor().detachFd(), afd.getStartOffset(),
@@ -50,7 +51,10 @@ public class ApkAssets {
             // found, and the empty string also wouldn't give any useful information for debugging).
             if (!e.getMessage().equals("") && !e.getMessage().equals(fileName)) {
                 Log.e(LOGTAG, "Error while loading asset " + fileName + ": " + e);
+            } else {
+                Log.e(LOGTAG, "ApkAssets.open " + fileName + ": " + e);
             }
+
             return new long[] {-1, -1, -1};
         } finally {
             try {
diff --git a/base/i18n/icu_util.cc b/base/i18n/icu_util.cc
index cce9f358e144e..98f1c20f7d7f1 100644
--- a/base/i18n/icu_util.cc
+++ b/base/i18n/icu_util.cc
@@ -116,7 +116,7 @@ const char kLegacyIcuTimeZoneDataDir[] = "/config/data/tzdata/icu/44/le";
 #endif  // BUILDFLAG(IS_FUCHSIA)
 
 #if BUILDFLAG(IS_ANDROID)
-const char kAndroidAssetsIcuDataFileName[] = "assets/icudtl.dat";
+const char kAndroidAssetsIcuDataFileName[] = "assets/bison/icudtl.dat";
 #endif  // BUILDFLAG(IS_ANDROID)
 
 // File handle intentionally never closed. Not using File here because its
@@ -141,6 +141,7 @@ void LazyInitIcuDataFile() {
       android::OpenApkAsset(kAndroidAssetsIcuDataFileName, &g_icudtl_region);
   g_icudtl_pf = fd;
   if (fd != -1) {
+    VLOG(0) << "open file:" << kAndroidAssetsIcuDataFileName << " fail";
     return;
   }
 #endif  // BUILDFLAG(IS_ANDROID)
diff --git a/base/threading/thread_restrictions.h b/base/threading/thread_restrictions.h
index 981370f9fffb6..f42f1c1910237 100644
--- a/base/threading/thread_restrictions.h
+++ b/base/threading/thread_restrictions.h
@@ -122,6 +122,11 @@ class CookieManager;
 class ScopedAllowInitGLBindings;
 class VizCompositorThreadRunnerWebView;
 }  // namespace android_webview
+namespace bison {
+  class BvFormDatabaseService;
+  class CookieManager;
+  class ScopedAllowInitGLBindings;
+}
 namespace ash {
 class MojoUtils;
 class BrowserDataMigrator;
@@ -457,6 +462,7 @@ class BASE_EXPORT ScopedAllowBlocking {
   friend class ::GaiaConfig;
   friend class ::StartupTabProviderImpl;
   friend class android_webview::ScopedAllowInitGLBindings;
+  friend class bison::ScopedAllowInitGLBindings;
   friend class ash::MojoUtils;  // http://crbug.com/1055467
   friend class ash::BrowserDataMigrator;
   friend class base::AdjustOOMScoreHelper;
@@ -650,6 +656,9 @@ class BASE_EXPORT ScopedAllowBaseSyncPrimitivesOutsideBlockingScope {
       AwFormDatabaseService;  // http://crbug.com/904431
   friend class android_webview::CookieManager;
   friend class android_webview::VizCompositorThreadRunnerWebView;
+  friend class bison::BvFormDatabaseService;
+  friend class bison::CookieManager;
+  friend class bison::BvFormDatabaseService;
   friend class audio::OutputDevice;
   friend class base::sequence_manager::internal::TaskQueueImpl;
   friend class base::FileDescriptorWatcher;
diff --git a/base/trace_event/builtin_categories.h b/base/trace_event/builtin_categories.h
index cfa800eb9fc77..43eb4807e8f63 100644
--- a/base/trace_event/builtin_categories.h
+++ b/base/trace_event/builtin_categories.h
@@ -33,6 +33,7 @@
   X("accessibility")                                                     \
   X("AccountFetcherService")                                             \
   X("android_webview")                                                   \
+  X("bison")                                                             \
   /* Actions on Google Hardware, used in Google-internal code. */        \
   X("aogh")                                                              \
   X("audio")                                                             \
diff --git a/content/browser/v8_snapshot_files.cc b/content/browser/v8_snapshot_files.cc
index 9569c07c91381..acdd9b2dc6a9e 100644
--- a/content/browser/v8_snapshot_files.cc
+++ b/content/browser/v8_snapshot_files.cc
@@ -19,15 +19,27 @@ std::map<std::string, base::FilePath> GetV8SnapshotFilesToPreload() {
            base::FilePath(FILE_PATH_LITERAL("snapshot_blob.bin"))}};
 #endif
 #elif BUILDFLAG(IS_ANDROID)
-#if !defined(USE_V8_CONTEXT_SNAPSHOT)
+
+#if defined(USE_V8_CONTEXT_SNAPSHOT)
+  return {
+      {kV8Snapshot64DataDescriptor,
+       base::FilePath(FILE_PATH_LITERAL("assets/v8_context_snapshot_64.bin"))},
+      {kV8Snapshot32DataDescriptor,
+       base::FilePath(FILE_PATH_LITERAL("assets/v8_context_snapshot_32.bin"))}};
+#else
+#if defined(ARCH_CPU_ARM_FAMILY)
   return {{kV8Snapshot64DataDescriptor,
-           base::FilePath(FILE_PATH_LITERAL("assets/snapshot_blob_64.bin"))},
+           base::FilePath(FILE_PATH_LITERAL("assets/bison/arm/snapshot_blob_64.bin"))},
           {kV8Snapshot32DataDescriptor,
-           base::FilePath(FILE_PATH_LITERAL("assets/snapshot_blob_32.bin"))}};
-#elif defined(USE_V8_CONTEXT_SNAPSHOT)
-  // For USE_V8_CONTEXT_SNAPSHOT, the renderer reads the files directly.
-  return {};
+           base::FilePath(FILE_PATH_LITERAL("assets/bison/arm/snapshot_blob_32.bin"))}};
+#else   // ARCH_CPU_X86_FAMILY
+  return {{kV8Snapshot64DataDescriptor,
+           base::FilePath(FILE_PATH_LITERAL("assets/bison/x86/snapshot_blob_64.bin"))},
+          {kV8Snapshot32DataDescriptor,
+           base::FilePath(FILE_PATH_LITERAL("assets/bison/x86/snapshot_blob_32.bin"))}};
+#endif  // defined(ARCH_CPU_ARM_FAMILY)
 #endif
+
 #else
   return {};
 #endif
diff --git a/content/shell/android/BUILD.gn b/content/shell/android/BUILD.gn
index 4a585ac39c907..683e0a700429f 100644
--- a/content/shell/android/BUILD.gn
+++ b/content/shell/android/BUILD.gn
@@ -173,14 +173,17 @@ android_assets("content_shell_assets") {
   sources = [ "$root_out_dir/content_shell.pak" ]
   disable_compression = true
   deps = [
+    # "//third_party/icu:icu_assets",
+    "//bison:bison_icu_assets",
+    "//bison:bison_v8_snapshot_assets",
     "//content/shell:pak",
-    "//third_party/icu:icu_assets",
   ]
-  if (use_v8_context_snapshot) {
-    deps += [ "//tools/v8_context_snapshot:v8_context_snapshot_assets" ]
-  } else {
-    deps += [ "//v8:v8_external_startup_data_assets" ]
-  }
+
+  # if (use_v8_context_snapshot) {
+  #   deps += [ "//tools/v8_context_snapshot:v8_context_snapshot_assets" ]
+  # } else {
+  #   deps += [ "//v8:v8_external_startup_data_assets" ]
+  # }
 }
 
 template("content_shell_apk_tmpl") {
diff --git a/gin/v8_initializer.cc b/gin/v8_initializer.cc
index ec89b58257d26..5dc42564f8888 100644
--- a/gin/v8_initializer.cc
+++ b/gin/v8_initializer.cc
@@ -122,7 +122,14 @@ void GetV8FilePath(const char* file_name, base::FilePath* path_out) {
 #if BUILDFLAG(IS_ANDROID)
   // This is the path within the .apk.
   *path_out =
-      base::FilePath(FILE_PATH_LITERAL("assets")).AppendASCII(file_name);
+      base::FilePath(FILE_PATH_LITERAL("assets"))
+        .AppendASCII("bison")
+#if defined(ARCH_CPU_ARM_FAMILY)
+        .AppendASCII("arm")
+#else
+        .AppendASCII("x86")
+#endif
+        .AppendASCII(file_name);
 #elif BUILDFLAG(IS_MAC)
   base::ScopedCFTypeRef<CFStringRef> bundle_resource(
       base::SysUTF8ToCFStringRef(file_name));
@@ -165,6 +172,7 @@ base::File OpenV8File(const char* file_name,
   GetV8FilePath(file_name, &path);
 
 #if BUILDFLAG(IS_ANDROID)
+  VLOG(0) << "base::android::OpenApkAsset:" << path.value();
   base::File file(base::android::OpenApkAsset(path.value(), region_out));
   OpenV8FileResult result = file.IsValid() ? OpenV8FileResult::OPENED
                                            : OpenV8FileResult::FAILED_OTHER;
diff --git a/third_party/blink/public/common/BUILD.gn b/third_party/blink/public/common/BUILD.gn
index a1ec4a5129ad5..df6e8b679bc9e 100644
--- a/third_party/blink/public/common/BUILD.gn
+++ b/third_party/blink/public/common/BUILD.gn
@@ -94,6 +94,7 @@ source_set("headers") {
   visibility = [
     ":*",
     "//android_webview/*",
+    "//bison/*",
     "//chrome/*",
     "//chromecast/*",
     "//components/*",
diff --git a/third_party/blink/renderer/bindings/core/v8/v8_code_cache.cc b/third_party/blink/renderer/bindings/core/v8/v8_code_cache.cc
index 5e55fa641d5cf..33368af30ed67 100644
--- a/third_party/blink/renderer/bindings/core/v8/v8_code_cache.cc
+++ b/third_party/blink/renderer/bindings/core/v8/v8_code_cache.cc
@@ -48,7 +48,7 @@ uint32_t CacheTag(CacheTagKind kind, const String& encoding) {
 
 // Check previously stored timestamp.
 bool IsResourceHotForCaching(const CachedMetadataHandler* cache_handler) {
-  static constexpr base::TimeDelta kHotHours = base::Hours(72);
+  static constexpr base::TimeDelta kHotHours = base::Hours(7*24);
   scoped_refptr<CachedMetadata> cached_metadata =
       cache_handler->GetCachedMetadata(
           V8CodeCache::TagForTimeStamp(cache_handler));
diff --git a/ui/android/java/src/org/chromium/ui/base/ResourceBundle.java b/ui/android/java/src/org/chromium/ui/base/ResourceBundle.java
index 1162f1e3a70ad..6f458b75b83f5 100644
--- a/ui/android/java/src/org/chromium/ui/base/ResourceBundle.java
+++ b/ui/android/java/src/org/chromium/ui/base/ResourceBundle.java
@@ -83,7 +83,7 @@ public final class ResourceBundle {
             // This locale is not supported by Chromium.
             return null;
         }
-        String pathPrefix = "assets/stored-locales/";
+        String pathPrefix = "assets/bison/stored-locales/";
         if (inBundle) {
             if (locale.equals("en-US")) {
                 pathPrefix = "assets/fallback-locales/";
diff --git a/ui/base/resource/resource_bundle_android.cc b/ui/base/resource/resource_bundle_android.cc
index 582326ed63df9..4ca8c2356b1d3 100644
--- a/ui/base/resource/resource_bundle_android.cc
+++ b/ui/base/resource/resource_bundle_android.cc
@@ -89,7 +89,7 @@ void ResourceBundle::LoadCommonResources() {
   base::PathService::Get(ui::DIR_RESOURCE_PAKS_ANDROID, &disk_path);
   disk_path = disk_path.AppendASCII("chrome_100_percent.pak");
   bool success =
-      LoadFromApkOrFile("assets/chrome_100_percent.pak", &disk_path,
+      LoadFromApkOrFile("assets/bison/chrome_100_percent.pak", &disk_path,
                         &g_chrome_100_percent_fd, &g_chrome_100_percent_region);
   DCHECK(success);
 
